#!/usr/local/cpanel/3rdparty/bin/perl
# cpanel - find-latest-version                  Copyright(c) 2019 cPanel, L.L.C.
#                                                           All rights Reserved.
# copyright@cpanel.net                                         http://cpanel.net
# This code is subject to the cPanel license. Unauthorized copying is prohibited
#
# This provides incremental updates to existing packages in EasyApache4.
package ea_ioncube10::find_latest_version;

use strict;
use warnings;

use lib "../ea-tools/lib/ea4_tool";    # assumes ea-tools is checked out next to this repo
use ea4_tool::util ();

use HTML::TreeBuilder;

ea4_tool::util::find_latest_version( \&_get_required, \&_add_sum ) if !caller();

###############
#### helpers ##
###############

#
# The landing page for ioncube is structured like so.   I am anchoring on the
# Linux (64 bits) string, from there I can go up and around for the href and
# the version number 10.3.9.
#
#       tr
#        td
#         Linux (64 bits)
#         a HREF https://ioncube24.com
#          img
#        td
#         a HREF https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz
#          tar.gz
#        td
#         a HREF https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.zip
#          zip
#        td
#          10.3.9
#        td
#          2019-10-11

my $anchor;

use constant max_depth => 30;

sub _recursive_descent {
    my ( $type, $node, $depth, $parent ) = @_;

    die "Recursion limit reached, have they changed the landing page?\n" if ( $depth > max_depth );

    # If $node is a reference, then it is an HTML::Element.

    if ( ref $node ) {

        # there is a tag associated with $node, for example "html" or
        # "li".

        my @children = $node->content_list();
        for my $child_node (@children) {
            _recursive_descent( $type, $child_node, $depth + 1, $node );
        }
    }
    else {

        # If $node is not a reference, then it is just a piece of text
        # from the HTML file.

        if ( !$anchor && $node =~ m/\Q$type\E/ ) {
            $anchor = $parent;
        }
    }

    return;
}

sub _scrape_page {
    my ( $type, $html ) = @_;

    my $treebuilder = HTML::TreeBuilder->new_from_content($html);
    my $root        = $treebuilder->elementify();

    undef $anchor;
    _recursive_descent( $type, $root, 0, undef );

    if ( !defined $anchor ) {
        die "Unable to identify the x86-64 version of ioncube, perhaps they have changed their landing page?\n";
    }

    # the anchor is the td, where we find the string Linux (64 bits) in, we then
    # need to hop over to 2 parallel tds, walk it back up to the tr and over to the tds.

    my $tr = $anchor->parent();

    my $scraped_version;
    my $scraped_tarball;

    my @children = $tr->content_list();
    for my $child_node (@children) {
        if ( ref($child_node) && $child_node->tag() eq 'td' ) {
            my @sub_children = $child_node->content_list();
            if (@sub_children) {
                my $text_node = $sub_children[0];
                if ( !ref($text_node) && $text_node =~ m/(\d+\.\d+\.\d+)/ ) {
                    $scraped_version = $1;
                }
                if ( !$scraped_tarball && ref($text_node) && $text_node->tag() eq 'a' ) {
                    my $href = $text_node->attr('href');
                    if ( $href =~ m/\.tar\.gz$/ ) {
                        $scraped_tarball = $href;
                    }
                }
            }
        }
    }

    if ( !defined $scraped_version || !defined $scraped_tarball ) {
        die "Could not find version and/or the tarball, perhaps they changed the format of the landing page?\n";
    }

    return ( $scraped_version, $scraped_tarball );
}

sub _get_required {
    my ($http) = @_;

    my $listing_url = "https://ioncube.com/loaders.php";
    my $res         = $http->get($listing_url);
    if ( !$res->{success} ) {
        die "Could not GET apache dist page ($res->{status} $res->{reason})\n";
    }

    my ( $scraped_version, $scraped_tarball ) = _scrape_page( 'Linux (64 bits)', $res->{content} );
    my ( $aux_version,     $aux_tarball )     = _scrape_page( 'Linux (32 bits)', $res->{content} );

    my $version = $scraped_version;
    my $url     = $scraped_tarball;
    my $ridx    = rindex( $scraped_tarball, '/' );
    die "Unable to determine the tarball name from $scraped_tarball\n" if ( $ridx < 0 );
    my $name = substr( $scraped_tarball, $ridx + 1 );

    $ridx = rindex( $aux_tarball, '/' );
    die "Unable to determine the tarball name from $aux_tarball\n" if ( $ridx < 0 );
    my $aux_name = substr( $aux_tarball, $ridx + 1 );

    my $other = {
        aux_tarball => {
            name => $aux_name,
            url  => $aux_tarball,
        },
    };

    return ( $version, $url, $name, $other );
}

sub _add_sum {
    my ( $http, $hr ) = @_;

    # unfortunately, ioncube does not provide any way to validate the tarball
    warn("Ioncube does not provide checksum data, you will need to manually validate the tarball\n");

    return 1;
}

1;
